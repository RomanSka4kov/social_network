{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","autoFocus","onChange","e","currentTarget","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","className","onSubmit","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","styles","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactName","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","description_block","avatar","src","photos","large","userPhoto","alt","target","files","initialValues","formData","then","Preloader","Post","s","item","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","console","log","postsElements","posts","el","id","posts_block","MyPostsReduxForm","newPost","addPost","post","Field","name","placeholder","component","validate","required","add_post_btn","MyPostsContainer","connect","state","profilePage","newPostText","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","userProfile","getStatus","refreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.4e05bf01.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description_block\":\"ProfileInfo_description_block__2qbzq\",\"profile_info_img_block\":\"ProfileInfo_profile_info_img_block__1rLb0\",\"avatar\":\"ProfileInfo_avatar__30w52\",\"contact\":\"ProfileInfo_contact__1FO1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_block\":\"MyPosts_posts_block__U9MPb\",\"add_post_btn\":\"MyPosts_add_post_btn__27vEt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__y_tny\"};","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}><b>Status:</b> {props.status || \"enter your status\"}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input value={status} autoFocus={true} onChange={onStatusChange} onBlur={deactivateEditMode} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport styles from './ProfileInfo.module.css';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form className=\"ProfileDataForm\" onSubmit={handleSubmit} >\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            { error && \r\n                <div className={style.formSummaryError}>\r\n                    <span>{error}</span>\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Full name:</b> { createField(\"Full name\", \"fullName\", Input, []) }\r\n            </div>\r\n            <div>\r\n                <b>Looking for job:</b> { createField(null, \"lookingForAJob\", Input, [], {type: \"checkbox\"}) }\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b> { createField(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [],) }\r\n            </div> \r\n            <div>\r\n                <b>About me:</b> { createField(\"About me\", \"aboutMe\", Textarea, [],) }\r\n            </div>\r\n            <div><b>Contacts: </b>{ Object.keys(profile.contacts).map(key => (\r\n                <div className={styles.contact} key={key}>\r\n                    <b>{key}:</b> { createField(key, \"contacts.\" + key, Input, [],) }\r\n                </div>\r\n            )) }</div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: \"editProfile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport styles from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div className=\"ProfileData\">\r\n            {isOwner && <div><button onClick={goToEditMode}>edit profile</button></div>}\r\n            <div><p><b>Full name: </b>{profile.fullName}</p></div>\r\n            <div><p><b>Looking for job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}</p></div>\r\n            { profile.lookingForAJob &&\r\n            <div><p><b>My professional skills: </b> {profile.lookingForAJobDescription}</p></div> \r\n            }\r\n            <div><p><b>About me: </b>{profile.aboutMe}</p></div>\r\n            <div><b>Contacts: </b>{ Object.keys(profile.contacts).map(key => (\r\n                <Contact contactName={key} contactValue={profile.contacts[key]} key={key} />\r\n            )) }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Contact = ({ contactName, contactValue}) => {\r\n    return (\r\n        <div className={styles.contact}>\r\n            <p><b>{contactName}:</b> {contactValue}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        savePhoto(e.target.files[0]);\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => { //fix later\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div className=\"ProfileInfo\">\r\n            <div className={styles.description_block}>\r\n                <img className={styles.avatar} src={profile.photos.large || userPhoto} alt=\"\" />\r\n                { isOwner && \r\n                    <input type=\"file\" onChange={onMainPhotoSelected} />\r\n                }\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\nconst Post = (props) => {\r\n    return(\r\n        <div className={s.item}>\r\n            <img src=\"http://cdn.collider.com/wp-content/uploads/2019/03/avatar-movie-sam-worthington.jpg\" alt=\"\" />\r\n            {props.message}\r\n            <div>\r\n                <span>like <span className=\"like_counts\">{props.likesCount}</span></span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    console.log('render'); // for test React.memo\r\n    const addNewPost = (newPost) => {\r\n        props.addPost(newPost.post);\r\n    }\r\n    let postsElements =\r\n        props.posts.map(el => <Post message={el.message} key={el.id} likesCount={el.likesCount} />);\r\n    \r\n        return (\r\n        <div className={s.posts_block}>\r\n            <h3>my posts</h3>\r\n            <MyPostsReduxForm onSubmit={addNewPost} />\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst MyPostsForm = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field name=\"post\"  \r\n                        placeholder=\"Enter your post\" \r\n                        component={Textarea}\r\n                        validate={[required, maxLength10]} />\r\n                </div>\r\n                <div className={s.add_post_btn}>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst MyPostsReduxForm = reduxForm({form: 'myPostForm'})(MyPostsForm);\r\n\r\nexport default MyPosts;","import { addPost } from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = ({isOwner, profile, status, updateStatus, savePhoto, saveProfile}) => {\r\n    return (\r\n        <div>\r\n           <ProfileInfo\r\n                isOwner={isOwner}\r\n                profile={profile}\r\n                status={status} \r\n                updateStatus={updateStatus}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile} />\r\n           <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { userProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profileReducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        this.props.userProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {match, profile, status, updateStatus, savePhoto, saveProfile} = this.props;\r\n\r\n        return (\r\n            <Profile\r\n                isOwner={!match.params.userId}\r\n                profile={profile} \r\n                status={status}\r\n                updateStatus={updateStatus}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile} />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { userProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}