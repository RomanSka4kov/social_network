{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogitem/Dialogitem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength20","maxLengthCreator","AddMessageForm","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","AddMessageFormRedux","reduxForm","form","Dialogs","state","dialogsPage","messagesElements","messagesData","map","el","key","dialogsElements","dialogsData","dialogs","dialog_items","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCWpMC,EARI,SAACC,GAChB,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAKN,EAAMO,QCEzCC,EANC,SAACR,GACb,OACI,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMS,U,iCCApCC,EAAcC,YAAiB,IAgBtBC,EAdQ,SAACZ,GACpB,OACI,0BAAMa,SAAUb,EAAMc,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACdV,KAAK,iBACLW,YAAY,kBACZC,SAAU,CAACC,IAAUV,MAE7B,6BAAK,2CCcXW,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,CAA0CV,GAEvDY,EAzBC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YACdC,EAAmBF,EAAMG,aAAaC,IAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAASrB,QAASqB,EAAGrB,QAASsB,IAAKD,EAAGxB,OACtF0B,EAAkBP,EAAMQ,YAAYJ,IAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAYvB,KAAMuB,EAAGvB,KAAMwB,IAAKD,EAAGxB,GAAIA,GAAIwB,EAAGxB,OAMhG,OACI,yBAAKL,UAAWC,IAAEgC,SACd,yBAAKjC,UAAWC,IAAEiC,cACbH,GAEL,yBAAK/B,UAAWC,IAAEkC,UACd,6BAAMT,GACN,kBAACN,EAAD,CAAqBR,SAXb,SAACwB,GACjBrC,EAAMsC,YAAYD,EAAOE,sB,uDCV7BC,EAA6B,SAACf,GAAD,MAAY,CACzCgB,OAAQhB,EAAMiB,KAAKD,S,OCcRE,sBACXC,YAdkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,cAGF,SAACmB,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAmBP,QDNR,SAACQ,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKjD,MAAMyC,OAET,kBAACM,EAAcE,KAAKjD,OAFI,kBAAC,IAAD,CAAUK,GAAG,eAJT,GAEX6C,IAAMH,WAWtC,OAFiCH,YAAQJ,EAARI,CAAoCI,ICA1DL,CAGbnB","file":"static/js/4.0ae8c40c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__5guId\",\"dialog_items\":\"Dialogs_dialog_items__3TQGM\",\"dialog\":\"Dialogs_dialog__3DqM1\",\"active\":\"Dialogs_active__2Hdnd\",\"messages\":\"Dialogs_messages__3kWXb\",\"message\":\"Dialogs_message__2vv_A\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    return(\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field} from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                    name=\"newMessageBody\"\r\n                    placeholder=\"Enter your mess\"\r\n                    validate={[required, maxLength20]}  />\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddMessageForm;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './Dialogitem/Dialogitem';\r\nimport Message from './Message/Message';\r\nimport { reduxForm } from 'redux-form';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n    let messagesElements = state.messagesData.map(el => <Message message={el.message} key={el.id} />);\r\n    let dialogsElements = state.dialogsData.map(el => <DialogItem name={el.name} key={el.id} id={el.id} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialog_items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render(){\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}\r\n","import { sendMessageCreator } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}